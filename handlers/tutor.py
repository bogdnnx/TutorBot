from aiogram import F, Router,types
from aiogram.types import Message, CallbackQuery,FSInputFile
from aiogram.filters import Command,StateFilter,or_f
from aiogram.fsm.state import StatesGroup,State
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
import os
from urllib.parse import quote
from sqlalchemy import select, case
from datetime import time
from aiogram.types import ReplyKeyboardRemove
import re
import logging
from typing import Optional



from filters.chat_types import ChatTypeFilter, IsTutor
from keyboard.reply import get_keyboard
from keyboard.inline import get_callback_btns
from database.orm_query import orm_update_balance, get_student_by_id,orm_delete_student, get_student_link, get_students,orm_update_student, orm_plus_lesson,orm_get_balance, orm_add_student, create_lesson, delete_lesson,get_files, get_lessons
from database.models import Student, Schedule, StudentFile

tutor_router = Router()
tutor_router.message.filter(ChatTypeFilter(["private"]), IsTutor())
logger = logging.getLogger(__name__)

UPLOADS_DIR = "uploads"

INFO = """\n‚ûñ–ö—Ä–∞—Ç–∫–∏–π —ç–∫—Å–∫—É—Ä—Å –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞\n\n‚ûñ–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –∑–∞–Ω—è—Ç–∏—è–º,–ø–æ–ª—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã,—Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏,—Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∏ —Ç–¥\n
üÜñüÜñüÜñ–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å:\n‚óæÔ∏è–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å —á—Ç–æ-–ª–∏–±–æ –≤–≤–æ–¥–∏—Ç—å —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ –º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å -\n‚óæÔ∏è–ï—Å–ª–∏ —Ç—ã –∑–∞–ø—É—Ç–∞–ª–∞—Å—å –∏–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å —á–µ–≥–æ-—Ç–æ —Ç–æ  –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã(–æ–± —ç—Ç–æ–º –Ω–∏–∂–µ)\n
‚óæÔ∏è–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∫–∞–∫–∞—è-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º–∞: –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –±–æ—Ç –≤—ã–¥–∞–ª –∫–∞–∫—É—é-—Ç–æ –æ—à–∏–±–∫—É - –Ω–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É(@bogdnnx)\n‚óæÔ∏è–ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ—É–¥–æ–±–Ω–æ - —Ç–æ–∂–µ –ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
\nüÜñ–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥:\n
/tutor - –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π\n
/cancel - –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n
/back - –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥(–µ—Å–ª–∏ —Ç—ã —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—à—å –¥–ª—è —É—á–µ–Ω–∏–∫–∞)\n
/status - –£–∑–Ω–∞—Ç—å —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—à—å


*** –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã/–≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è üí¨ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É***\n
"""
TUTOR_KB = get_keyboard(
    "üíµ–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞",
    "üë•–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–µ–Ω–∏–∫–æ–≤",
    "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,1),
)

sheduele_buttons = get_keyboard(
    "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫",
    "‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫",
    "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    
)


@tutor_router.message(F.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def get_main_menu(message, state:FSMContext):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup = TUTOR_KB)
    await state.clear()


class StudentActions(StatesGroup):
    name = State()
    umk = State()
    lesson_link = State()
    cost = State()
    tg_id = State()
    umk_file = State()
    

    state_descriptions = {
        "StudentActions:name": "–í–≤–æ–¥ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞",
        "StudentActions:umk": "–í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É–º–∫",
        "StudentActions:lesson_link": "–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é",
        "StudentActions:cost": "–í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏—è",
        "StudentActions:tg_id": "–í–≤–æ–¥ Telegram ID —É—á–µ–Ω–∏–∫–∞",
        "StudentActions:umk_file": "–í–≤–æ–¥ —Ñ–∞–π–ª–∞"     
    }

class StudentSelection(StatesGroup):
    choosed_student = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
    another_actions = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    view_students = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
    advanced_actions = State()
    
@tutor_router.message(Command("start"))
async def start(message:Message):
    await message.answer("‚úåÔ∏è –≠—Ç–æ –±–æ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É\n"+INFO, reply_markup=TUTOR_KB)



@tutor_router.message(StateFilter("*"),Command("cancel"))
@tutor_router.message(StateFilter("*"),F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")   
async def cancel(message:Message, state:FSMContext):
    await state.clear()
    await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=TUTOR_KB)
    
    
@tutor_router.message(Command("status"))
async def get_status(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if not current_state:
        await message.answer("–¢—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ! üòä")
        return
    readable_state = StudentActions.state_descriptions.get(current_state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ü§î")

    await message.answer(f"üîç –°–µ–π—á–∞—Å —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å: {readable_state}")   
    return current_state
   
@tutor_router.message(StateFilter("*"),Command("back"))
@tutor_router.message(StateFilter("*"),F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def back(message:Message, state:FSMContext):
    current_state = await state.get_state()
    
    if current_state == StudentActions.name:
        await message.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥, –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–µ–ª—å–∑—è, –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è")
        return  
    prev = None
    
    for step in StudentActions.__all_states__:
        if step.state == current_state:
            await state.set_state(prev)
            await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥ {StudentActions.state_descriptions[prev.state]}\n–ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ")
            return
        prev = step
    
   
   
@tutor_router.message(or_f(Command("tutor"),F.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def tutor_begin(message:Message):
    ''' –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å –±–æ—Ç–æ–º'''
    await message.answer("üë©‚Äçüè´–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é, —É—á–∏—Ç–µ–ª—åüë©‚Äçüè´",reply_markup = TUTOR_KB)
        

@tutor_router.message(F.text == "üíµ–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
async def set_name(message:Message, state:FSMContext):
    '''–∑–∞–ø—Ä–æ—Å —Ñ–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–≤–≤–æ–¥ –∏–º–µ–Ω–∏" '''
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —É—á–µ–Ω–∏–∫–∞", reply_markup=types.ReplyKeyboardRemove())   
    await state.set_state(StudentActions.name)   
   
   
@tutor_router.message(StateFilter(StudentActions.name),F.text)
async def set_umk(message:Message, state:FSMContext):
    ''' –∑–∞–ø—Ä–æ—Å —É–º–∫ –∏ –∞–ø–¥–µ–π—Ç —Å–ª–æ–≤–∞—Ä—è –∏–º–µ–Ω–µ–º'''
    await state.update_data(name = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –û–ø–∏—Å–∞–Ω–∏–µ/–ó–∞–º–µ—Ç–∫–∏ –ø—Ä–æ —É—á–µ–Ω–∏–∞\n\n‚ùóÔ∏è–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –¥–ª—è —Ç–µ–±—è —Ç–µ–∫—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n–õ–∏–±–æ –º–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å -")
    await state.set_state(StudentActions.umk)

  
@tutor_router.message(StateFilter(StudentActions.umk), F.text)
async def set_umk_link(message:Message,state: FSMContext):
    '''–∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Ä–æ–∫ –∏ –∞–ø–¥–µ–π—Ç —Å–ª–æ–≤–∞—Ä—è'''
    await state.update_data(umk = message.text)
    await message.answer("üåê–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—éüåê")
    await state.set_state(StudentActions.lesson_link)
    

@tutor_router.message(StateFilter(StudentActions.lesson_link), F.text)
async def set_cost(message:Message,state:FSMContext):
    '''–∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –∞–ø–¥–µ–π—Å—Ç —Å–ª–æ–≤–∞—Ä—è –ª–º–Ω–∫–æ–º'''
    await state.update_data(lesson_link = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞\n‚ÄºÔ∏è–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ—Å—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –ø—Ä–∏–º–µ—Ä: 1500")
    await state.set_state(StudentActions.cost)

@tutor_router.message(StateFilter(StudentActions.cost),F.text)
async def set_tg_id(message:Message,state:FSMContext):
    try:
        await state.update_data(cost = int(message.text))
    except:
        await message.answer("üÜñ–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞üÜñ\n–í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º id —É—á–µ–Ω–∏–∫–∞\n‚ÄºÔ∏è–ü—Ä–∏–º–µ—Ä:8193157007")
    await state.set_state(StudentActions.tg_id)
    
    
@tutor_router.message(StateFilter(StudentActions.tg_id))
async def set_file(message, state:FSMContext, session: AsyncSession):
    try:
        await state.update_data(tg_id = message.text)
    except:
        await message.answer("üÜñ–¢–µ–ª–µ–≥—Ä–∞–º–º ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–ΩüÜñ\n–í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞")
        return
    await message.answer("üìç–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ªüìç\n\nüìé–†–∞–∑–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20–ú–ë\n–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ -")
    await state.set_state(StudentActions.umk_file)



@tutor_router.message(StateFilter(StudentActions.umk_file), F.document)
async def handle_file(message: Message, state: FSMContext):
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º
    files = data.get("files", [])
    
    document: Document = message.document  
    file_name = document.file_name
    file_path = os.path.join(UPLOADS_DIR, file_name)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    await message.bot.download(file=document, destination=file_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫
    files.append({
        "file_name": file_name,
        "file_path": file_path
    })
    
    data["files"] = files
    await state.update_data(data)
    
    await message.answer(f"–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '-' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

@tutor_router.message(StateFilter(StudentActions.umk_file), F.text == "-")
async def finish_files(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç, –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç
    if not data.get("files"):
        data["files"] = []
        await message.answer("–§–∞–π–ª–∞ —É —É—á–µ–Ω–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:
    student_info = (
        f"–ò–º—è: {data['name']}\n"
        f"–£–ú–ö: {data['umk']}\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫: {data['lesson_link']}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Ä–æ–∫–∞: {data['cost']}\n"
        f"–¢–µ–ª–µ–≥—Ä–∞–º ID —É—á–µ–Ω–∏–∫–∞: {data['tg_id']}\n"
        f"–§–∞–π–ª—ã –£–ú–ö: {', '.join(file['file_name'] for file in data.get('files', [])) or '–ù–µ—Ç —Ñ–∞–π–ª–∞'}"
    )
    
    await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", reply_markup=TUTOR_KB)
    await message.answer_sticker("CAACAgIAAx0Cd0LlaQACAUZn3wfdH3RWW1N8duMCtyzMnmBZMQAC7hQAAuNVUEk4S4qtAhNhvDYE")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    await orm_add_student(session, data)
    await state.clear()






# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
@tutor_router.message(F.text == "üë•–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–µ–Ω–∏–∫–æ–≤")
async def view_students(message: types.Message, session: AsyncSession, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤."""
    students = await get_students(session)
    
    if not students:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞
    students_list = "\n\n".join(
        f"{index}üßí. –ò–º—è: {student.name}\n–û–ø–ª–∞—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π —Å–µ–π—á–∞—Å: {student.balance}" 
        for index, student in enumerate(students, start=1))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(students=students)
    await state.set_state(StudentSelection.view_students)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞
    
    await message.answer(students_list)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.")


@tutor_router.message(StateFilter(StudentSelection.view_students), F.text.isdigit())
async def select_student(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É."""
    data = await state.get_data()
    students = data.get("students", [])
    
    try:
        student_index = int(message.text) - 1
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    if 0 <= student_index < len(students):
        student = students[student_index]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
        await state.update_data(
            selected_student_id=student.id,
            selected_student_name=student.name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        )
        await state.set_state(StudentSelection.choosed_student)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è ID
        await message.answer(
            f"üë§ –ò–º—è: {student.name}\n"
            f"üìö –ò–Ω—Ñ–∞: {student.umk}\n"
            f"üí∏ –û–ø–ª–∞—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: {student.balance}",
            reply_markup=get_callback_btns(
                btns={
                    "üí∏ –ë–∞–ª–∞–Ω—Å": f"checkBalance_{student.id}",
                    "üîó –°—Å—ã–ª–∫–∞": f"lessonLink_{student.id}", 
                    "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã": f"sendfile_{student.id}",
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å": f"edit_{student.id}",
                    "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ": f"additional_{student.id}",
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥": "back_to_list"
                },
                sizes=(2, 2, 1)
            )
        )
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@tutor_router.callback_query(F.data == "back_to_list")
async def back_to_students_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        await callback.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        students = await get_students(session)
        if not students:
            await callback.message.edit_text("üéâ –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(students=students)
        await state.set_state(StudentSelection.view_students)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å ID –∏ –∏–º–µ–Ω–∞–º–∏
        students_list = "\n".join(
            f"{idx}. ID{student.id} | {student.name}"
            for idx, student in enumerate(students, start=1)
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n\n" + students_list + 
            "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_callback_btns(btns={"‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é": "main_menu"})
        )

    except Exception as e:
        logger.error(f"Error in back_to_list: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞.")
        await state.clear()



@tutor_router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.answer()
        await state.clear()
        await callback.message.answer(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=TUTOR_KB
        )
    except Exception as e:
        logger.error(f"Main menu error: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é")


@tutor_router.callback_query(F.data == "back_inline_to_list")
async def back_to_students_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        await callback.answer()
        students = await get_students(session)
        
        if not students:
            await callback.message.edit_text("üéâ –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
            await state.clear()
            return

        await state.update_data(students=students)
        await state.set_state(StudentSelection.view_students)

        students_list = "\n".join(
            f"{idx}. ID{student.id} | {student.name}"
            for idx, student in enumerate(students, start=1)
        )

        await callback.message.edit_text(
            "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n\n" + students_list + 
            "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=get_callback_btns(
                btns={
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é": "main_menu",
                    "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫": "refresh_list"
                }
            )
        )

    except Exception as e:
        logger.error(f"Error in back_to_list: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞.")
        await state.clear()

# –î–æ–±–∞–≤–∏–º —Ç–∞–∫–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@tutor_router.callback_query(F.data == "refresh_list")
async def refresh_students_list(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"""
    await back_to_students_list(callback, state, session)





@tutor_router.callback_query(F.data.startswith("lessonLink_"))
async def send_link(callback:CallbackQuery, session:AsyncSession):
    student_id = int(callback.data.split("_")[-1])
    link = await get_student_link(session, student_id)
    await callback.message.answer(link)
    await callback.answer()
    
    
    
# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —É—á–µ–Ω–∏–∫–∞
@tutor_router.callback_query(F.data.startswith("sendfile_"))
async def send_student_files(callback: CallbackQuery, session: AsyncSession):
    try:
        files_list = await get_files(int(callback.data.split("_")[-1]), session)
        if not files_list:
            await callback.message.answer("‚ùå –§–∞–π–ª—ã —É—á–µ–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É, –ø—Ä–æ–≤–µ—Ä—è—è –∏—Ö –Ω–∞–ª–∏—á–∏–µ
        for file in files_list:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
            if not os.path.exists(file):
                await callback.message.answer(f"‚ùå –§–∞–π–ª '{file}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
                continue
            document = FSInputFile(file)
            await callback.message.answer_document(document)
            
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å logging.exception)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
    finally:
        await callback.answer()



@tutor_router.callback_query(F.data.startswith("additional_"))
async def additional_actions(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –ø–æ ID"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ–Ω–∏–∫–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        student_id = int(callback.data.split("_")[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ –≤ –±–∞–∑–µ
        student = await session.get(Student, student_id)
        if not student:
            await callback.message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            selected_student_id=student_id,
            selected_student_name=student.name
        )
        await state.set_state(StudentSelection.advanced_actions)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å ID
        await callback.message.edit_text(
            f"‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è:\n{student.name}",
            reply_markup=get_callback_btns(
                btns={
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫—É": f"back_{student_id}",
                    "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞": f"delete_{student_id}"
                },
                sizes=(1, 1)
        )
        )
        
    except ValueError:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"Error in additional_actions: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")



@tutor_router.callback_query(F.data.startswith("back_"))
async def back_to_student_profile(callback: CallbackQuery, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é —É—á–µ–Ω–∏–∫–∞"""
    try:
        await callback.answer()
        student_id = int(callback.data.split("_")[1])
        
        student = await session.get(Student, student_id)
        if not student:
            await callback.message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await callback.message.edit_text(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞:\n\n"
            f"–ò–º—è: {student.name}\n"
            f"–£–ú–ö: {student.umk}\n"
            f"–ë–∞–ª–∞–Ω—Å: {student.balance} –∑–∞–Ω—è—Ç–∏–π",
            reply_markup=get_callback_btns(
                btns={
                    "üí∏ –ë–∞–ª–∞–Ω—Å": f"checkBalance_{student.id}",
                    "üîó –°—Å—ã–ª–∫–∞": f"lessonLink_{student.id}", 
                    "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã": f"sendfile_{student.id}",
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å": f"edit_{student.id}",
                    "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ": f"additional_{student.id}",
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥": "back_to_list"
                },
                sizes=(2, 2, 1)
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É—á–µ–Ω–∏–∫—É: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")

@tutor_router.callback_query(F.data.startswith("delete_"))
async def delete_student_handler(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        await callback.answer()
        student_id = int(callback.data.split("_")[1])
        
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞?",
            reply_markup=get_callback_btns(
                btns={
                    "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å": f"confirm_delete_{student_id}",
                    "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞": "cancel_delete"
                },
                sizes=(2,)
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

@tutor_router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_student(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞"""
    try:
        await callback.answer()
        student_id = int(callback.data.split("_")[2])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        success = await orm_delete_student(session, student_id)
        
        if success:
            await callback.message.edit_text("‚úÖ –£—á–µ–Ω–∏–∫ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã")
            await state.clear()
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=TUTOR_KB
        )
        else:
            await callback.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError as e:
        await callback.message.answer(str(e))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞")
        
        
@tutor_router.callback_query(F.data == "cancel_delete")
async def cancel_deletion(callback: CallbackQuery, state: FSMContext, session):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º callback –∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        student_id = data.get("selected_student_id")
        
        if student_id:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é —É—á–µ–Ω–∏–∫–∞
            student = await session.get(Student, student_id)
            if student:
                await callback.message.edit_text(
                    f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞:\n{student.name}",
                    reply_markup=get_callback_btns(
                        btns={
                    "üí∏ –ë–∞–ª–∞–Ω—Å": f"checkBalance_{student.id}",
                    "üîó –°—Å—ã–ª–∫–∞": f"lessonLink_{student.id}", 
                    "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã": f"sendfile_{student.id}",
                    "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å": f"edit_{student.id}",
                    "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ": f"additional_{student.id}",
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥": "back_to_list"
                }, sizes=(2,2,1)
                    )
                )
            else:
                await callback.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await state.clear()
        else:
            # –ï—Å–ª–∏ ID —É—á–µ–Ω–∏–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É
            await callback.message.edit_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            await back_to_students_list(callback, state, session)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
        await state.clear()





# 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞"
@tutor_router.callback_query(F.data.startswith("checkBalance_"))
async def balance_actions(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º —É—á–µ–Ω–∏–∫–∞ –ø–æ ID"""
    try:
        await callback.answer()
        student_id = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã
        student = await session.get(Student, student_id)
        if not student:
            await callback.message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(
            f"üí∏ –ë–∞–ª–∞–Ω—Å —É—á–µ–Ω–∏–∫–∞: {student.balance} –∑–∞–Ω—è—Ç–∏–π\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=get_callback_btns(btns={
                "‚ûñ –ü—Ä–æ–≤–µ–ª–∏ —É—Ä–æ–∫": f"minus_{student_id}",
                "‚ûï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ": f"plus_{student_id}",
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": f"back_{student_id}"
            })
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—á–µ–Ω–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_student_id=student_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞")

# 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ +/- 
@tutor_router.callback_query(F.data.startswith("minus_"))
async def minus_lesson(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        await callback.answer()
        student_id = int(callback.data.split("_")[1])
        
        async with session.begin():
            student = await session.get(Student, student_id)
            if not student:
                await callback.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            
            student.balance -= 1
            await session.commit()
            await callback.answer("‚úÖ –ó–∞–Ω—è—Ç–∏–µ —Å–ø–∏—Å–∞–Ω–æ")
            await balance_actions(callback, session, state)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await session.rollback()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è")

@tutor_router.callback_query(F.data.startswith("plus_"))
async def plus_lesson(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    try:
        await callback.answer()
        student_id = int(callback.data.split("_")[1])
        
        async with session.begin():
            student = await session.get(Student, student_id)
            if not student:
                await callback.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            student.balance += 1
            await session.commit()
            await callback.answer("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            await balance_actions(callback, session, state)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        await session.rollback()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")




class ChangeProperties(StatesGroup):
    main_changing_properties = State()
    waiting_for_umk = State()
    waiting_for_schedule = State()
    waiting_for_lesson_link = State()
    waiting_for_tg_id = State()
    waiting_for_cost = State()



@tutor_router.callback_query(F.data.startswith("edit_"))
async def change_student(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await state.set_state(ChangeProperties.main_changing_properties)
    try:
        student_id = int(callback.data.split("_")[1])
        student = await session.get(Student, student_id)
        
        if not student:
            await callback.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        change_kbd = get_callback_btns(
                btns={
                    "üìö –û–ø–∏—Å–∞–Ω–∏–µ": f"change_umk_{student_id}",
                    "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫": f"change_link_{student_id}",
                    "üÜî TG ID": f"change_tgid_{student_id}",
                    "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å": f"change_cost_{student_id}",
                    "–ù–∞–∑–∞–¥(–∫ —Å—Ç—É–¥–µ–Ω—Ç—É)": "to_student"
                },
                sizes=(2, 2, 1)
            )
        await state.update_data(selected_student_id=student_id, change_kbd = change_kbd)
        
        await callback.message.edit_text(
            "üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=change_kbd
            )
            
        
        await callback.answer()
    except Exception as e:
        logger.error(f"Change error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")








@tutor_router.callback_query(F.data == "to_student")
async def back_to_student(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–µ–Ω–∏–∫–æ–º"""
    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
        await callback.answer()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        student_id = data.get("selected_student_id")
        
        if not student_id:
            await callback.message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –∏–∑ –ë–î
        student = await session.get(Student, student_id)
        if not student:
            await callback.message.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —É—á–µ–Ω–∏–∫–µ
        text = (
            f"üë§ –ò–º—è: {student.name}\n"
            f"üìö –ò–Ω—Ñ–∞: {student.umk}\n"
            f"üí∏ –û–ø–ª–∞—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: {student.balance}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
        reply_markup = get_callback_btns(
            btns={
                "üí∏ –ë–∞–ª–∞–Ω—Å": f"checkBalance_{student.id}",
                "üîó –°—Å—ã–ª–∫–∞": f"lessonLink_{student.id}",
                "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã": f"sendfile_{student.id}",
                "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å": f"edit_{student.id}",
                "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ": f"additional_{student.id}",
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": "back_to_list"
            },
            sizes=(2, 2, 1)
        )

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=text,
            reply_markup=reply_markup
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(StudentSelection.choosed_student)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É—á–µ–Ω–∏–∫—É: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()


###########################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
@tutor_router.callback_query(F.data.startswith("change_"))
async def handle_parameter_change(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        param = callback.data.split("_")[1]
        student_id = int(callback.data.split("_")[-1])
        
        student = await session.get(Student, student_id)
        if not student:
            await callback.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        state_mapping = {
            "umk": ChangeProperties.waiting_for_umk,
            "link": ChangeProperties.waiting_for_lesson_link,
            "cost": ChangeProperties.waiting_for_cost,
            "tgid": ChangeProperties.waiting_for_tg_id
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_msg = await callback.message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {param}:")
        
        await state.update_data(
            selected_student_id=student_id,
            param_to_change=param,
            edit_message_id=sent_msg.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        )
        await state.set_state(state_mapping[param])
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@tutor_router.message(StateFilter(
    ChangeProperties.waiting_for_umk,
    ChangeProperties.waiting_for_lesson_link,
    ChangeProperties.waiting_for_tg_id,
    ChangeProperties.waiting_for_cost
))
async def apply_changes(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    student_id = data["selected_student_id"]
    param = data["param_to_change"]
    edit_message_id = data.get("edit_message_id")
    
    try:
        async with session.begin():
            student = await session.get(Student, student_id)
            if not student:
                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=edit_message_id,
                    text="‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                )
                return

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if param == "tgid":
                setattr(student, "tg_id", message.text)
                
            elif param == "cost":
                try:
                    setattr(student, "cost", float(message.text))
                except ValueError:
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=edit_message_id,
                        text="‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"
                    )
                    return
                    
            elif param == "link":
                setattr(student, "lesson_link", message.text)
                
            else:
                setattr(student, param, message.text)

            session.add(student)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=edit_message_id,
            text=f"‚úÖ {param} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=edit_message_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        )
    finally:
        await state.clear()
        await message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–æ–¥–æ–º




class ScheduleFSM(StatesGroup):
    main_sch = State()
    choose_day = State()    # –í—ã–±–æ—Ä –¥–Ω—è
    choose_student = State()
    set_time = State() 
    set_duration = State()      
    delete_lesson = State()
    confirm_deletion = State()
     
    
cancel_inline_scheduele = get_callback_btns(btns = {"–û—Ç–º–µ–Ω–∞":"cancel_"})

DAYS_OF_LESSON = {
    0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    1: "–í—Ç–æ—Ä–Ω–∏–∫",
    2: "–°—Ä–µ–¥–∞",
    3: "–ß–µ—Ç–≤–µ—Ä–≥",
    4: "–ü—è—Ç–Ω–∏—Ü–∞",
    5: "–°—É–±–±–æ—Ç–∞",
    6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
}

DAYS_KB = get_keyboard(
    *[day for day in DAYS_OF_LESSON.values()],"–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", sizes=(2,2,3,1)
)



@tutor_router.callback_query(F.data == "cancel_")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Ä–∞–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=sheduele_buttons
    )
    await state.set_state(ScheduleFSM.main_sch)
    await callback.answer()


    
    
@tutor_router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def schedule_actions(message: Message, state: FSMContext):
    await state.set_state(ScheduleFSM.main_sch)
    await message.answer(
        text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=sheduele_buttons
    )
    
    
@tutor_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫")
async def add_lesson(message: Message, session: AsyncSession, state: FSMContext):
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:",
        reply_markup=DAYS_KB
    )
    
    # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    await message.answer(
        "üëá –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=cancel_inline_scheduele
    )
    
    list_of_students = await get_students(session)
    await state.update_data(students=list_of_students)
    await state.set_state(ScheduleFSM.choose_day)
    
    
@tutor_router.message(ScheduleFSM.choose_day, F.text.in_(DAYS_OF_LESSON.values()))
async def day_chosen(message: Message, state: FSMContext):
    DAY_TO_NUMBER = {v: k for k, v in DAYS_OF_LESSON.items()}
    await state.update_data(day=DAY_TO_NUMBER[message.text])
    
    data = await state.get_data()
    students = data.get("students", [])
    
    if not students:
        await message.answer("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤", reply_markup=cancel_inline_scheduele)
        return
    
    students_list = "\n".join(f"{s.name} (üÜî: {s.id})" for s in students)
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞:\n\n{students_list}",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    ) 
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    await message.answer(
        "üëá –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=cancel_inline_scheduele
    )
    
    await state.set_state(ScheduleFSM.choose_student)
    
    
    
@tutor_router.message(ScheduleFSM.choose_student)
async def process_student_number(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    students = data.get("students", [])
    student_ids = [student.id for student in students]
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        selected_num = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    if selected_num not in student_ids:
        await message.answer(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—á–µ–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
    await state.update_data(student_id=selected_num)
    await message.answer(
        f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30/09 45/1030",
        reply_markup=cancel_inline_scheduele
    )
    
    await state.set_state(ScheduleFSM.set_time)
    
    
    
def parse_time(input_time: str) -> time:
    cleaned = re.sub(r'\D', '', input_time)
    
    if len(cleaned) == 3:
        cleaned = '0' + cleaned
        
    if len(cleaned) != 4:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

    hours = int(cleaned[:2])
    minutes = int(cleaned[2:])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    if not (0 <= hours <= 23):
        raise ValueError("–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23")
    if not (0 <= minutes <= 59):
        raise ValueError("–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 59")
    
    return time(hour=hours, minute=minutes)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏


@tutor_router.message(ScheduleFSM.set_time)
async def process_time(message: Message, state: FSMContext):
    try:
        time_obj = parse_time(message.text)
    except ValueError as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30 –∏–ª–∏ 0945)")
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await state.update_data(start_time=time_obj)
    await message.answer("‚è≥ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 60)",reply_markup=cancel_inline_scheduele)
    await state.set_state(ScheduleFSM.set_duration)
    
    

@tutor_router.message(ScheduleFSM.set_duration)
async def save_lesson(message: Message, session: AsyncSession, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    try:
        duration = int(message.text)
        if duration < 15 or duration > 240:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (15-240 –º–∏–Ω—É—Ç)")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    new_lesson = Schedule(
        day_of_week=data['day'],
        start_time=data['start_time'],  # –û–±—ä–µ–∫—Ç time
        student_id=data['student_id'],
        #name = data['name'],
        duration=duration
    )
    
    session.add(new_lesson)
    await session.commit()
    
    await message.answer("‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=sheduele_buttons)
    await state.clear()
    
    
    
@tutor_router.message(F.text == "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ —Å –∏–º–µ–Ω–∞–º–∏ —É—á–µ–Ω–∏–∫–æ–≤
    query = (
        select(Schedule, Student.name)
        .join(Student, Schedule.student_id == Student.id)
        .order_by(Schedule.day_of_week, Schedule.start_time)
    )
    
    result = await session.execute(query)
    lessons = result.all()
    
    if not lessons:
        await message.answer("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ!")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    schedule_dict = {}
    for lesson, student_name in lessons:
        day_name = DAYS_OF_LESSON[lesson.day_of_week]
        time_str = lesson.start_time.strftime("%H:%M")
        
        if day_name not in schedule_dict:
            schedule_dict[day_name] = []
        
        schedule_dict[day_name].append(f"‚Ä¢ {student_name} - {time_str} ({lesson.duration} –º–∏–Ω)")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    response = []
    for day in DAYS_OF_LESSON.values():
        if day in schedule_dict:
            response.append(f"\nüìÖ **{day}:**")
            response.extend(schedule_dict[day])
    
    await message.answer(
        "üóí –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n" + "\n".join(response),
        parse_mode="Markdown"
    )
    
    
    
    
    
    
    
    
@tutor_router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫")
async def start_deletion(message: Message, session: AsyncSession, state: FSMContext):
    lessons = await get_lessons(session)
    if not lessons:
        await message.answer("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    lesson_data = [
        (lesson.id, DAYS_OF_LESSON[lesson.day_of_week], 
        lesson.start_time.strftime("%H:%M"), student_name)
        for lesson, student_name in lessons
    ]
    lesson_ids = [lesson.id for lesson, _ in lessons]
    
    await state.update_data(
        lesson_data=lesson_data,
        lesson_ids=lesson_ids
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    lessons_list = "\n".join(
        f"ID: {id} | {day} | {student} | {time}"
        for id, day, time, student in lesson_data
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n" + lessons_list + 
        "\n\n‚ùï –í–≤–µ–¥–∏—Ç–µ ID —É—Ä–æ–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
        reply_markup=cancel_inline_scheduele
    )
    
    await state.set_state(ScheduleFSM.delete_lesson)

@tutor_router.message(ScheduleFSM.delete_lesson)
async def process_deletion(message: Message, state: FSMContext):
    data = await state.get_data()
    lesson_ids = data["lesson_ids"]
    
    try:
        selected_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è

    if selected_id not in lesson_ids:
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        lessons_list = "\n".join(
            f"ID: {id} | {day} | {student} | {time}"
            for id, day, time, student in data["lesson_data"]
        )
        
        await message.answer(
            f"‚ùå –£—Ä–æ–∫–∞ —Å ID {selected_id} –Ω–µ—Ç!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏:\n{lessons_list}",
            reply_markup=cancel_inline_scheduele
        )
        return  # –û—Å—Ç–∞–µ–º—Å—è –≤ delete_lesson

    await message.answer(
        f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ {selected_id}?",
        reply_markup=get_callback_btns(btns={
            "–î–∞": f"confirm_del_{selected_id}",
            "–ù–µ—Ç": "cancel_del"
        })
    )
    await state.set_state(ScheduleFSM.confirm_deletion)
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
@tutor_router.callback_query(F.data == "cancel_del")
async def cancel_deletion(callback: CallbackQuery, state: FSMContext):
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
    data = await state.get_data()
    lessons_list = "\n".join(
        f"ID: {id} | {day} | {student} | {time}"
        for id, day, time, student in data.get("lesson_data", [])
    )
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await callback.message.edit_text(
        "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:\n\n" + lessons_list,
        reply_markup=cancel_inline_scheduele
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–∫–∞
    await state.set_state(ScheduleFSM.delete_lesson)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@tutor_router.callback_query(F.data.startswith("confirm_del_"))
async def confirm_deletion(callback: CallbackQuery, session: AsyncSession, state: FSMContext):
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å—Ä–∞–∑—É
        await callback.answer()
        
        lesson_id = int(callback.data.split("_")[-1])
        data = await state.get_data()
        
        if lesson_id not in data.get("lesson_ids", []):
            await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        await delete_lesson(session, lesson_id)
        await callback.answer("‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        lessons = await get_lessons(session)
        if not lessons:
            await callback.message.answer(
                "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ!",
                reply_markup=sheduele_buttons
            )
            await state.clear()
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        new_data = [
            (lesson.id, DAYS_OF_LESSON[lesson.day_of_week], 
            lesson.start_time.strftime("%H:%M"), student_name)
            for lesson, student_name in lessons
        ]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            lesson_data=new_data,
            lesson_ids=[lesson.id for lesson, _ in lessons]
        )
        
        await state.set_state(ScheduleFSM.delete_lesson)

    except Exception as e:
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
        await state.clear()
        logger.error(f"Deletion error: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    lessons = await get_lessons(session)
    if not lessons:
        await callback.message.answer("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ!", reply_markup=sheduele_buttons)
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    new_data = [
        (lesson.id, DAYS_OF_LESSON[lesson.day_of_week], 
        lesson.start_time.strftime("%H:%M"), student_name)
        for lesson, student_name in lessons
    ]
    await state.update_data(
        lesson_data=new_data,
        lesson_ids=[lesson.id for lesson, _ in lessons]
    )
    
    await callback.message.answer(
        "‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω! –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫:\n\n" + 
        "\n".join(f"ID: {id} | {day} | {student} | {time}" 
                 for id, day, time, student in new_data),
        reply_markup=cancel_inline_scheduele
    )
    await state.set_state(ScheduleFSM.delete_lesson)
    
    
@tutor_router.message(F.text | F.sticker)
async def test(message):
    await message.reply("–ù–µ –±–∞–ª—É–π—Å—è")
    await message.answer_sticker("CAACAgIAAxkBAAIiYmfn1cQeRZPPtXrl8xBYbgYuN8zPAAJfIQAC_AURS8u3kBUrBc55NgQ", reply_markup = TUTOR_KB)
    
